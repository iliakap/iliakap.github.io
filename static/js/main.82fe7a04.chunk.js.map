{"version":3,"sources":["App.js","Fraction.js","reportWebVitals.js","index.js"],"names":["GREATER","React","style","color","LESSER","App","state","questionType","nums","correct","undefined","fractions","correctAnswers","n","Math","random","this","setState","maybeMinus","toFixed","randomize","selection","other","showResult","height","display","justifyContent","alignItems","textAlign","padding","onClick","solve","className","FormattedNumber","number","p","m","value","i","donly","tolerance","h1","h2","k1","k2","negative","parseInt","b","a","floor","console","log","aux","abs","decimalToFraction","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82fe7a04.chunk.js","sourcesContent":["import './App.css';\nimport * as React from \"react\";\nimport * as math from 'mathjs'\nimport Progress from '@ramonak/react-progress-bar'\nimport FractionDisplay from \"./Fraction\";\n\nconst TYPE_G = 'G'\nconst TYPE_S = 's'\n\nconst GREATER = <span>מה יותר <span style={{color: \"green\"}}>גדול?</span></span>\nconst LESSER = <span>מה יותר <span style={{color: \"deeppink\"}}>קטן?</span></span>\n\nclass App extends React.Component {\n  state = {\n    questionType: null,\n    nums: [0, 0],\n    correct: undefined,\n    fractions: false,\n    correctAnswers: 0\n  }\n\n  maybeMinus(n) {\n    return Math.random() > 0.5 ? n : n * -1\n  }\n\n  randomize() {\n    const questionType = Math.random() > 0.5 ? TYPE_G : TYPE_S\n    this.setState({\n      questionType,\n      fractions: Math.random()> 0.5,\n      nums: [this.maybeMinus(Math.random().toFixed(2)),\n        this.maybeMinus(Math.random().toFixed(2))],\n    })\n  }\n\n  componentDidMount() {\n    this.randomize()\n  }\n\n  solve(selection) {\n    const other = (selection + 1) % 2\n    if (this.state.questionType === TYPE_G) {\n      this.showResult(this.state.nums[selection] > this.state.nums[other])\n    } else {\n      this.showResult(this.state.nums[selection] < this.state.nums[other])\n    }\n\n    this.randomize()\n  }\n\n  showResult(correct) {\n    let correctAnswers = this.state.correctAnswers\n    if (correct) {\n      correctAnswers++;\n    }\n\n    this.setState({...this.state, correct, correctAnswers})\n  }\n\n  render() {\n    return (\n      <div style={{height: '100%', display: \"flex\", justifyContent: 'center', alignItems: 'center'}}>\n        <div style={{height: '50%'}}>\n          <div style={{textAlign: \"center\", padding: '12px'}}>\n            {this.state.questionType === TYPE_G ? GREATER : LESSER}\n          </div>\n          <div style={{textAlign: 'center', padding: '12px'}}>\n            <span onClick={() => this.solve(0)} className='btn'><FormattedNumber fractions={this.state.fractions} number={this.state.nums[0]}/></span>\n            <span onClick={() => this.solve(1)} className='btn'><FormattedNumber fractions={this.state.fractions} number={this.state.nums[1]}/></span>\n          </div>\n          <div style={{textAlign: 'center', padding: '12px'}}>\n            {this.state.correct === true && <span>נכון :)</span>}\n            {this.state.correct === false && <span>לא נכון :(</span>}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction decimalToFraction(value, donly = true) {\n  var tolerance = 1.0E-6; // from how many decimals the number is rounded\n  var h1 = 1;\n  var h2 = 0;\n  var k1 = 0;\n  var k2 = 1;\n  var negative = false;\n  var i;\n\n  if (parseInt(value) == value) { // if value is an integer, stop the script\n    return value;\n  } else if (value < 0) {\n    negative = true;\n    value = -value;\n  }\n\n  if (donly) {\n    i = parseInt(value);\n    value -= i;\n  }\n\n  var b = value;\n\n  do {\n    var a = Math.floor(b);\n    console.log(a)\n    var aux = h1;\n    h1 = a * h1 + h2;\n    h2 = aux;\n    aux = k1;\n    k1 = a * k1 + k2;\n    k2 = aux;\n    b = 1 / (b - a);\n  } while (Math.abs(value - h1 / k1) > value * tolerance);\n\n  return (negative ? \"-\" : '') + ((donly & (i != 0)) ? i + ' ' : '') + (h1 == 0 ? '' : h1 + \"/\" + k1);\n}\n\nconst FormattedNumber = (p) => {\n  const m = decimalToFraction(p.number)\n  return p.fractions ? m : p.number\n}\n\nexport default App;\n","import * as React from \"react\";\n\nexport default class FractionDisplay extends React.Component {\n  parseFractionText(text) {\n    const substrings = text.split(\"/\");\n    if (substrings.length !== 2) {\n      throw `Unexpected input format: ${text}`;\n    }\n    const numbers = substrings.map((s) => {\n      const result = parseFloat(s);\n      if (isNaN(result)) {\n        throw `Not a number: ${s}`;\n      }\n      return result;\n    });\n    return {\n      numerator: numbers[0],\n      denominator: numbers[1],\n    };\n  }\n\n  render() {\n    const  fraction = this.parseFractionText(this.props.text);\n    return (\n      <div className=\"fraction\">\n        <span className=\"fraction--numerator\">{fraction.numerator}</span>\n        <span className=\"fraction--bar\"></span>\n        <span className=\"fraction--denominator\">{fraction.denominator}</span>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}